// https-examples.js - –ü—Ä–∏–º–µ—Ä—ã HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞—à–µ–º—É API

const https = require('https');
const axios = require('axios');
const config = require('./config');

// –°–æ–∑–¥–∞–Ω–∏–µ HTTPS –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const httpsAgent = new https.Agent({
    rejectUnauthorized: config.HTTPS.rejectUnauthorized,
    keepAlive: config.HTTPS.keepAlive,
    maxSockets: config.HTTPS.maxSockets,
    timeout: config.HTTPS.timeout,
    secureProtocol: config.HTTPS.secureProtocol,
    ciphers: config.HTTPS.ciphers
});

// Axios instance —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –≤–∞—à–µ–≥–æ API
const apiClient = axios.create({
    baseURL: config.API.baseURL,
    timeout: config.API.timeout,
    httpsAgent: httpsAgent,
    headers: {
        ...config.API.defaultHeaders,
        'Authorization': `Bearer ${config.API.apiKey}`
    }
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –≤–∞—à–µ–º—É API
async function makeSecureAPICall(endpoint, data = {}, method = 'POST', customHeaders = {}) {
    try {
        console.log(`üîí Making HTTPS request to: ${endpoint}`);
        
        const requestConfig = {
            method: method,
            url: endpoint,
            data: data,
            headers: {
                ...config.API.defaultHeaders,
                ...customHeaders,
                'Authorization': `Bearer ${config.API.apiKey}`,
                'X-Request-ID': generateRequestId(),
                'X-Timestamp': new Date().toISOString()
            },
            httpsAgent: httpsAgent,
            timeout: config.API.timeout
        };
        
        const response = await apiClient(requestConfig);
        
        console.log(`‚úÖ HTTPS response received:`, {
            status: response.status,
            statusText: response.statusText,
            headers: response.headers
        });
        
        return {
            success: true,
            data: response.data,
            status: response.status,
            headers: response.headers,
            requestId: response.headers['x-request-id']
        };
        
    } catch (error) {
        console.error(`‚ùå HTTPS request failed:`, {
            endpoint: endpoint,
            error: error.message,
            status: error.response?.status,
            statusText: error.response?.statusText
        });
        
        return {
            success: false,
            error: error.response?.data || error.message,
            status: error.response?.status || 0,
            code: error.code
        };
    }
}

// –ü—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ HTTPS –∑–∞–ø—Ä–æ—Å–æ–≤

// 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authenticateUser(email, password) {
    return await makeSecureAPICall(config.API.endpoints.login, {
        email: email,
        password: password,
        client: 'email_client',
        timestamp: new Date().toISOString()
    }, 'POST');
}

// 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function validateCredentials(email, password, protocol) {
    return await makeSecureAPICall(config.API.endpoints.validateCredentials, {
        email: email,
        password: password,
        protocol: protocol,
        validation_type: 'email_client'
    }, 'POST');
}

// 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function logUserActivity(email, action, details = {}) {
    return await makeSecureAPICall(config.API.endpoints.logActivity, {
        user_email: email,
        action: action,
        details: details,
        timestamp: new Date().toISOString(),
        ip_address: 'localhost', // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∏–∑ req.ip
        user_agent: 'EmailClient/1.0',
        session_id: generateSessionId()
    }, 'POST');
}

// 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ email —Å—Ç–∞—Ç—É—Å–∞
async function checkEmailStatus(email, accountData) {
    return await makeSecureAPICall(config.API.endpoints.checkEmail, {
        email: email,
        account_data: accountData,
        check_type: 'connection_status',
        timestamp: new Date().toISOString()
    }, 'POST');
}

// 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ email
async function getEmailStatistics(email, dateFrom, dateTo) {
    return await makeSecureAPICall(config.API.endpoints.getEmailStats, {
        email: email,
        date_from: dateFrom,
        date_to: dateTo,
        include_details: true
    }, 'GET');
}

// 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function sendEncryptedData(email, encryptedPayload) {
    return await makeSecureAPICall(config.API.endpoints.encryptedData, {
        email: email,
        encrypted_data: encryptedPayload,
        encryption_method: 'AES-256-GCM',
        timestamp: new Date().toISOString()
    }, 'POST');
}

// 7. –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async function secureConnectionCheck(email, connectionData) {
    return await makeSecureAPICall(config.API.endpoints.secureCheck, {
        email: email,
        connection_data: connectionData,
        security_level: 'high',
        verify_ssl: true,
        timestamp: new Date().toISOString()
    }, 'POST');
}

// 8. –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ email –∞–∫–∫–∞—É–Ω—Ç–æ–≤
async function batchProcessAccounts(accounts, operation) {
    return await makeSecureAPICall('/batch/process', {
        accounts: accounts,
        operation: operation,
        batch_id: generateBatchId(),
        timestamp: new Date().toISOString()
    }, 'POST');
}

// 9. –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
async function getActivityLogs(email, limit = 100) {
    return await makeSecureAPICall(config.API.endpoints.getActivityLog, {
        email: email,
        limit: limit,
        order: 'desc'
    }, 'GET');
}

// 10. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–∞
async function updateAccountData(email, updateData) {
    return await makeSecureAPICall(config.API.endpoints.accountManagement, {
        email: email,
        update_data: updateData,
        operation: 'update',
        timestamp: new Date().toISOString()
    }, 'PUT');
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function generateRequestId() {
    return 'req_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
}

function generateSessionId() {
    return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 12);
}

function generateBatchId() {
    return 'batch_' + Date.now() + '_' + Math.random().toString(36).substr(2, 8);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ HTTPS
function handleHTTPSError(error, context = '') {
    const errorInfo = {
        context: context,
        message: error.message,
        code: error.code,
        status: error.response?.status,
        statusText: error.response?.statusText,
        url: error.config?.url,
        method: error.config?.method,
        timestamp: new Date().toISOString()
    };
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
    switch (error.code) {
        case 'ENOTFOUND':
            errorInfo.userMessage = '–°–µ—Ä–≤–µ—Ä API –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL.';
            break;
        case 'ECONNREFUSED':
            errorInfo.userMessage = '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ —Å–µ—Ä–≤–µ—Ä–æ–º.';
            break;
        case 'ETIMEDOUT':
            errorInfo.userMessage = '–¢–∞–π–º–∞—É—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.';
            break;
        case 'CERT_HAS_EXPIRED':
            errorInfo.userMessage = 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫.';
            break;
        case 'UNABLE_TO_VERIFY_LEAF_SIGNATURE':
            errorInfo.userMessage = '–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç.';
            break;
        default:
            errorInfo.userMessage = '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API.';
    }
    
    console.error('HTTPS Error:', errorInfo);
    return errorInfo;
}

// Middleware –¥–ª—è retry –ª–æ–≥–∏–∫–∏
async function makeAPICallWithRetry(endpoint, data, method = 'POST', maxRetries = 3) {
    let lastError;
    
    for (let attempt = 1; attempt <= maxRetries; attempt++) {
        try {
            console.log(`üîÑ Attempt ${attempt}/${maxRetries} for ${endpoint}`);
            
            const result = await makeSecureAPICall(endpoint, data, method);
            
            if (result.success) {
                return result;
            }
            
            // –ï—Å–ª–∏ –Ω–µ —É—Å–ø–µ—à–Ω–æ, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
            if (attempt < maxRetries) {
                const delay = Math.pow(2, attempt) * 1000; // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                console.log(`‚è≥ Waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                continue;
            }
            
            lastError = result;
            
        } catch (error) {
            lastError = error;
            
            if (attempt < maxRetries) {
                const delay = Math.pow(2, attempt) * 1000;
                console.log(`‚è≥ Error occurred, waiting ${delay}ms before retry...`);
                await new Promise(resolve => setTimeout(resolve, delay));
                continue;
            }
        }
    }
    
    return {
        success: false,
        error: 'Max retries exceeded',
        lastError: lastError,
        attempts: maxRetries
    };
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
async function exampleUsage() {
    console.log('üöÄ Starting HTTPS API examples...');
    
    const testEmail = 'test@example.com';
    const testPassword = 'test_password';
    
    try {
        // 1. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        console.log('\n1. üîê Authenticating user...');
        const authResult = await authenticateUser(testEmail, testPassword);
        console.log('Auth result:', authResult.success ? '‚úÖ Success' : '‚ùå Failed');
        
        // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        console.log('\n2. ‚úÖ Validating credentials...');
        const validateResult = await validateCredentials(testEmail, testPassword, 'imap');
        console.log('Validation result:', validateResult.success ? '‚úÖ Valid' : '‚ùå Invalid');
        
        // 3. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        console.log('\n3. üìù Logging activity...');
        const logResult = await logUserActivity(testEmail, 'login', { 
            source: 'email_client',
            protocol: 'imap'
        });
        console.log('Log result:', logResult.success ? '‚úÖ Logged' : '‚ùå Failed');
        
        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ email
        console.log('\n4. üìß Checking email status...');
        const statusResult = await checkEmailStatus(testEmail, {
            provider: 'gmail',
            protocol: 'imap'
        });
        console.log('Status result:', statusResult.success ? '‚úÖ Checked' : '‚ùå Failed');
        
        // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å retry
        console.log('\n5. üìä Getting statistics with retry...');
        const statsResult = await makeAPICallWithRetry(
            config.API.endpoints.getEmailStats,
            { email: testEmail },
            'GET',
            3
        );
        console.log('Stats result:', statsResult.success ? '‚úÖ Retrieved' : '‚ùå Failed');
        
    } catch (error) {
        console.error('‚ùå Example failed:', error.message);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    makeSecureAPICall,
    authenticateUser,
    validateCredentials,
    logUserActivity,
    checkEmailStatus,
    getEmailStatistics,
    sendEncryptedData,
    secureConnectionCheck,
    batchProcessAccounts,
    getActivityLogs,
    updateAccountData,
    makeAPICallWithRetry,
    handleHTTPSError,
    exampleUsage,
    
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    generateRequestId,
    generateSessionId,
    generateBatchId
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    exampleUsage().then(() => {
        console.log('\n‚ú® Examples completed');
    }).catch(error => {
        console.error('\nüí• Examples failed:', error);
    });
}